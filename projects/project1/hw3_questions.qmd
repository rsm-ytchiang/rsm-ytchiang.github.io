---
title: "Homework3 - Multinomial Logit Examples"
author: "Thomas Chiang"
date: today
callout-appearance: minimal
---


This assignment uses uses the MNL model to analyze (1) yogurt purchase data made by consumers at a retail location, and (2) conjoint data about consumer preferences for minivans.


## 1. Estimating Yogurt Preferences

### Likelihood for the Multi-nomial Logit (MNL) Model

Suppose we have $i=1,\ldots,n$ consumers who each select exactly one product $j$ from a set of $J$ products. The outcome variable is the identity of the product chosen $y_i \in \{1, \ldots, J\}$ or equivalently a vector of $J-1$ zeros and $1$ one, where the $1$ indicates the selected product. For example, if the third product was chosen out of 4 products, then either $y=3$ or $y=(0,0,1,0)$ depending on how we want to represent it. Suppose also that we have a vector of data on each product $x_j$ (eg, size, price, etc.). 

We model the consumer's decision as the selection of the product that provides the most utility, and we'll specify the utility function as a linear function of the product characteristics:

$$ U_{ij} = x_j'\beta + \epsilon_{ij} $$

where $\epsilon_{ij}$ is an i.i.d. extreme value error term. 

The choice of the i.i.d. extreme value error term leads to a closed-form expression for the probability that consumer $i$ chooses product $j$:

$$ \mathbb{P}_i(j) = \frac{e^{x_j'\beta}}{\sum_{k=1}^Je^{x_k'\beta}} $$

For example, if there are 4 products, the probability that consumer $i$ chooses product 3 is:

$$ \mathbb{P}_i(3) = \frac{e^{x_3'\beta}}{e^{x_1'\beta} + e^{x_2'\beta} + e^{x_3'\beta} + e^{x_4'\beta}} $$

A clever way to write the individual likelihood function for consumer $i$ is the product of the $J$ probabilities, each raised to the power of an indicator variable ($\delta_{ij}$) that indicates the chosen product:

$$ L_i(\beta) = \prod_{j=1}^J \mathbb{P}_i(j)^{\delta_{ij}} = \mathbb{P}_i(1)^{\delta_{i1}} \times \ldots \times \mathbb{P}_i(J)^{\delta_{iJ}}$$

Notice that if the consumer selected product $j=3$, then $\delta_{i3}=1$ while $\delta_{i1}=\delta_{i2}=\delta_{i4}=0$ and the likelihood is:

$$ L_i(\beta) = \mathbb{P}_i(1)^0 \times \mathbb{P}_i(2)^0 \times \mathbb{P}_i(3)^1 \times \mathbb{P}_i(4)^0 = \mathbb{P}_i(3) = \frac{e^{x_3'\beta}}{\sum_{k=1}^Je^{x_k'\beta}} $$

The joint likelihood (across all consumers) is the product of the $n$ individual likelihoods:

$$ L_n(\beta) = \prod_{i=1}^n L_i(\beta) = \prod_{i=1}^n \prod_{j=1}^J \mathbb{P}_i(j)^{\delta_{ij}} $$

And the joint log-likelihood function is:

$$ \ell_n(\beta) = \sum_{i=1}^n \sum_{j=1}^J \delta_{ij} \log(\mathbb{P}_i(j)) $$


### Yogurt Dataset

We will use the `yogurt_data` dataset, which provides anonymized consumer identifiers (`id`), a vector indicating the chosen product (`y1`:`y4`), a vector indicating if any products were "featured" in the store as a form of advertising (`f1`:`f4`), and the products' prices (`p1`:`p4`). For example, consumer 1 purchased yogurt 4 at a price of 0.079/oz and none of the yogurts were featured/advertised at the time of consumer 1's purchase.  Consumers 2 through 7 each bought yogurt 2, etc.

_todo: import the data, maybe show the first few rows, and describe the data a bit._

```{python}

import pandas as pd

yogurt_data = pd.read_csv('/home/jovyan/code/MGTA 495/QUARTO_WEBSITE/data/yogurt_data.csv')

yogurt_data.head()

```

The dataset yogurt_data contains the following columns:

- `id`: Consumer identifier.

- `y1, y2, y3, y4`: Binary indicators for the yogurt product chosen by the consumer. For instance, y4 = 1 indicates the consumer chose product 4.

- `f1, f2, f3, f4`: Binary indicators for whether each yogurt product was featured in the store. A 1 indicates the product was featured, and 0 means it was not.

- `p1, p2, p3, p4`: Prices per ounce of each of the four yogurt products.

The dataset allows analysis of **consumer choices influenced by product prices and marketing strategies.**

Each row corresponds to a single purchase event by a consumer, describing which product was chosen, which products were advertised, and at what price each product was available.


Let the vector of product features include brand dummy variables for yogurts 1-3 (we'll omit a dummy for product 4 to avoid multi-collinearity), a dummy variable to indicate if a yogurt was featured, and a continuous variable for the yogurts' prices:  

$$ x_j' = [\mathbbm{1}(\text{Yogurt 1}), \mathbbm{1}(\text{Yogurt 2}), \mathbbm{1}(\text{Yogurt 3}), X_f, X_p] $$

The "hard part" of the MNL likelihood function is organizing the data, as we need to keep track of 3 dimensions (consumer $i$, covariate $k$, and product $j$) instead of the typical 2 dimensions for cross-sectional regression models (consumer $i$ and covariate $k$). 

What we would like to do is reorganize the data from a "wide" shape with $n$ rows and multiple columns for each covariate, to a "long" shape with $n \times J$ rows and a single column for each covariate.  As part of this re-organization, we'll add binary variables to indicate the first 3 products; the variables for featured and price are included in the dataset and simply need to be "pivoted" or "melted" from wide to long.  

To reshape and prepare the data for the MNL model, we'll perform the following steps:

1. Reshape the Data: Convert the dataset from its current wide format (where each row contains data for all four yogurts) to a long format (where each row corresponds to a single product for a single consumer). This means that for **each consumer, there will be four rows in the datasetâ€”one for each product.**

2. Create Dummy Variables: Create binary dummy variables for the first three yogurt brands (Yogurt 1, Yogurt 2, and Yogurt 3). **Yogurt 4 will be treated as the baseline category**, so no dummy is needed for it.

3. Reorganize Variables: Ensure that featured flags and prices are appropriately aligned with the reshaped data.

```{python}

# Reshape the data from wide to long format using melt instead
id_vars = ['id']
value_vars = ['y1', 'y2', 'y3', 'y4', 'f1', 'f2', 'f3', 'f4', 'p1', 'p2', 'p3', 'p4']
yogurt_long = yogurt_data.melt(id_vars=id_vars, value_vars=value_vars, var_name='variable', value_name='value')

# Split variable column to separate product indicators from type indicators (chosen, featured, price)
yogurt_long['type'] = yogurt_long['variable'].str[0]  # 'y', 'f', or 'p'
yogurt_long['product'] = yogurt_long['variable'].str[1].astype(int)  # product number

# Pivot table to long format for MNL analysis
yogurt_long = yogurt_long.pivot_table(index=['id', 'product'], columns='type', values='value', aggfunc='first').reset_index()

# Create dummy variables for yogurt products
yogurt_long['Yogurt1'] = (yogurt_long['product'] == 1).astype(int)
yogurt_long['Yogurt2'] = (yogurt_long['product'] == 2).astype(int)
yogurt_long['Yogurt3'] = (yogurt_long['product'] == 3).astype(int)

# Rename columns for clarity
yogurt_long.rename(columns={'y': 'chosen', 'f': 'featured', 'p': 'price'}, inplace=True)

yogurt_long.head(16)  # Showing data for 4 products across the first few consumers

```

The dataset is now reshaped into a long format that is suitable for MNL model analysis. Here's what the transformed data contains:

- `id`: Consumer identifier.

- `product`: Indicates the product number (1 through 4).

- `featured`: Binary indicator if the yogurt was featured (1 if featured, 0 otherwise).

- `price`: Price of the yogurt.

- `chosen`: Binary indicator showing if the product was chosen (1 if chosen, 0 otherwise).

- `Yogurt1, Yogurt2, Yogurt3`: Dummy variables for the first three products. These are used as covariates to avoid multicollinearity by omitting a dummy for product 4, which serves as the baseline category.

With the data now in this format, each consumer has four rows, each corresponding to one of the four yogurt products. This structure **allows us to easily apply the multinomial logit model** to analyze consumer choices based on product features such as being featured and pricing, along with brand preferences signified by the dummy variables.

### Estimation

To estimate the parameters of the multinomial logit (MNL) model, we need to implement the log-likelihood function based on the theoretical framework you've provided earlier. The log-likelihood function for the MNL model is given by:

$$
\ell(\beta) = \sum_{i=1}^{n} \sum_{j=1}^{J} \delta_{ij} \log(P_i(j))
$$

Where:

- $\delta_{ij}$ is an indicator that consumer $i$ chose product $j$, represented by the `chosen` column in our dataset.

- $P_i(j)$ is the probability that consumer $i$ chooses product $j$, which is modeled as:

$$
P_i(j) = \frac{e^{x_{ij}'\beta}}{\sum_{k=1}^{J} e^{x_{ik}'\beta}}
$$

Here, $x_{ij}$ represents the feature vector for product $j$ and consumer $i$, and $\beta$ is the parameter vector we need to estimate.

We'll code the log-likelihood function which computes the sum of the log probabilities for all chosen products by all consumers, based on the parameters $\beta$. Let's first define the feature matrix $x_{ij}$ and then proceed to implement the function.


```{python}
import numpy as np

# Define the features matrix x
# Concatenate the dummy variables for yogurts 1-3, the featured dummy, and the price into a features matrix
features = yogurt_long[['Yogurt1', 'Yogurt2', 'Yogurt3', 'featured', 'price']].values
choices = yogurt_long['chosen'].values

# Define the log-likelihood function for the MNL model
def log_likelihood(beta, features, choices):
    # Calculate utility for each product for each consumer
    utility = np.dot(features, beta)
    # Reshape utility to separate each consumer's product utilities into rows
    utility = utility.reshape(-1, 4)  # Assuming 4 products
    
    # Compute the exponential of the utility values
    exp_utility = np.exp(utility)
    # Compute the sum of exponentials for each consumer (denominator of the probability)
    sum_exp_utility = np.sum(exp_utility, axis=1)
    
    # Calculate the log probability of the chosen products
    # Select the utility of the chosen product by multiplying with the choices matrix reshaped to the utility shape
    chosen_utility = exp_utility * choices.reshape(-1, 4)
    # Sum chosen utilities across products to get a single value per consumer
    chosen_utility = np.sum(chosen_utility, axis=1)
    
    # Calculate log probabilities
    log_prob = np.log(chosen_utility) - np.log(sum_exp_utility)
    
    # Sum log probabilities across all consumers to get the log likelihood
    log_likelihood_value = np.sum(log_prob)
    return log_likelihood_value

# Test the function with an initial beta of zeros
initial_beta = np.zeros(5)  # 5 parameters (3 dummies, 1 featured, 1 price)
log_likelihood(initial_beta, features, choices)

```

The log-likelihood function has been implemented and tested with an initial parameter vector $\beta$ of zeros. The computed log-likelihood value for these initial parameters is approximately $-3368.70$.

This value serves as a starting point. The goal in the MNL model fitting process would be to find the parameter values that maximize this log-likelihood function. 

To find the maximum likelihood estimates (MLEs) of the parameters for the multinomial logit model using the `optimize()` function from the `scipy.optimize` module, we can use the `minimize()` function, which is designed for minimization. Since we want to maximize the log-likelihood, we can minimize the negative of the log-likelihood function.

Let's proceed with this setup and use the `minimize()` function to optimize the parameters.

```{python}

from scipy.optimize import minimize

# Define the negative log-likelihood function since we are minimizing
def negative_log_likelihood(beta, features, choices):
    return -log_likelihood(beta, features, choices)

# Set initial guess for the beta parameters
initial_beta_guess = np.zeros(5)  # 5 parameters: 3 product intercepts, 1 featured, 1 price

# Perform the optimization using minimize from scipy.optimize
result = minimize(negative_log_likelihood, initial_beta_guess, args=(features, choices), method='BFGS')

# Output the results
result

```

### Discussion

We learn that the optimization process has successfully found the maximum likelihood estimates (MLEs) for the parameters in the multinomial logit model. Here are the estimated parameters:

- $\beta_1$ (Intercept for Yogurt 1): 1.3877
- $\beta_2$ (Intercept for Yogurt 2): 0.6435
- $\beta_3$ (Intercept for Yogurt 3): -3.0861
- $\beta_f$ (Coefficient for featured): 0.4874
- $\beta_p$ (Coefficient for price): -37.0578

Interpretation:

- **Yogurt 1** has the **highest positive intercept** (1.3877), indicating that, when all else being equal, it is the **most preferred yogurt among the four options**. This means that if the yogurts were identical in price and none were featured, consumers would be most likely to choose Yogurt 1.

- **Yogurt 2** also has a positive intercept (0.6435), which is lower than that of Yogurt 1. This suggests that Yogurt 2 is less preferred than Yogurt 1 but still generally favored over Yogurt 3.

- **Yogurt 3** has a negative intercept (-3.0861), indicating a baseline disfavor compared to the omitted category (Yogurt 4, which has an intercept of zero by default in this model setup). This suggests that, all other factors being equal, Yogurt 3 is the least preferred among the choices.

Summary:

Thus, when no yogurt is featured and when prices are equal:

- **Yogurt 1** is the most preferred option.
- **Yogurt 2** is less preferred than Yogurt 1 but more than Yogurt 3.
- **Yogurt 3** is the least preferred among those with an explicit intercept in the model.

To calculate the dollar benefit between the most preferred and the least preferred yogurt, we can use the estimated price coefficient as a conversion factor. This conversion tells us how much a unit increase in utility is worth in terms of dollars. Here's how you can compute this:

Steps:

1. **Identify the Utility Difference**: Calculate the difference in utility between the most preferred yogurt (Yogurt 1) and the least preferred yogurt (Yogurt 3) based on their intercepts.

2. **Convert Utility Difference to Dollar Value**: Use the estimated price coefficient $\beta_p$ to convert this utility difference into a dollar value.

Formula:

$$
\text{Dollar Benefit} = (\beta_1 - \beta_3) \times \left(\frac{1}{-\beta_p}\right)
$$

Where:

- $\beta_1$ is the intercept for Yogurt 1 (1.3877).
- $\beta_3$ is the intercept for Yogurt 3 (-3.0861).
- $\beta_p$ is the price coefficient (-37.0578), and we take the inverse of its negative value to convert utility to dollars.

Let's calculate this dollar benefit.


```{python}
# Extracting the parameter values for beta1, beta3, and beta_p
beta_1 = 1.3877
beta_3 = -3.0861
beta_p = -37.0578

# Calculate the utility difference
utility_difference = beta_1 - beta_3

# Convert utility difference to dollar benefit
dollar_benefit = utility_difference * (1 / -beta_p)

dollar_benefit

```

The dollar benefit of choosing the most preferred yogurt (Yogurt 1) over the least preferred yogurt (Yogurt 3), per unit, is approximately $0.12. This means that consumers effectively perceive an additional 12 cents in value when choosing Yogurt 1 over Yogurt 3, given equal prices and no promotional activities.

---

One benefit of the MNL model is that we can simulate counterfactuals (eg, what if the price of yogurt 1 was $0.10/oz instead of $0.08/oz).

To simulate the counterfactuals, we will follow the steps below.

**Step 1: Calculate the Current Market Shares**

First, we calculate the existing market shares for each product by averaging the `chosen` indicators across consumers for each product.


```{python}
# Calculate current market shares based on the 'chosen' indicators for each product
current_market_shares = yogurt_long.groupby('product')['chosen'].mean()
current_market_shares

```

The current market shares for each yogurt product are:

- **Yogurt 1**: 34.20%
- **Yogurt 2**: 40.12%
- **Yogurt 3**: 2.92%
- **Yogurt 4**: 22.76%

**Step 2: Simulate Counterfactual with Price Increase**

Next, we'll simulate the scenario where the price of Yogurt 1 increases by $0.10. This requires modifying the price column for Yogurt 1 in the features matrix and recalculating the choice probabilities using our fitted model parameters.


```{python}
# Extract the beta coefficients from the optimization result
fitted_betas = result.x

# Increase the price of Yogurt 1 by $0.10
# Copy features array to modify it without affecting the original
modified_features = features.copy()
modified_features[:, 4] += 0.10 * (modified_features[:, 0] == 1)  # Only increase price for Yogurt 1

# Function to calculate choice probabilities using the fitted model parameters
def calculate_probabilities(features, beta):
    utility = np.dot(features, beta)
    utility = utility.reshape(-1, 4)  # Reshape to separate each consumer's product utilities
    exp_utility = np.exp(utility)
    sum_exp_utility = np.sum(exp_utility, axis=1, keepdims=True)
    probabilities = exp_utility / sum_exp_utility
    return probabilities

# Calculate new choice probabilities with the price increase
new_probabilities = calculate_probabilities(modified_features, fitted_betas)

# Calculate new market shares by taking the mean of probabilities for each product
new_market_shares = np.mean(new_probabilities, axis=0)
new_market_shares

```

**Step 3: Analyze the Impact of Price Increase on Market Shares**

The new estimated market shares after increasing the price of Yogurt 1 by $0.10 are:

- **Yogurt 1**: 2.11%
- **Yogurt 2**: 59.11%
- **Yogurt 3**: 4.40%
- **Yogurt 4**: 34.37%

**Comparison and Discussion**

The price increase of Yogurt 1 has a significant impact:

- **Yogurt 1**'s market share dramatically decreases from 34.20% to 2.11%. This substantial drop reflects the sensitivity to price changes, especially given the large negative coefficient for price in the model.

- **Yogurt 2** sees a major increase in its market share from 40.12% to 59.11%, indicating that many consumers who previously chose Yogurt 1 might switch to Yogurt 2.

- **Yogurt 3** and **Yogurt 4** also experience changes, with slight increases in their market shares, which could be attributed to some consumers shifting their preferences due to the price change in Yogurt 1.


This simulation highlights the influence of pricing on consumer choices and can help guide strategic pricing decisions to optimize market shares.

## 2. Estimating Minivan Preferences


### Data

Let's start by loading the rintro dataset to get a better understanding of its structure and content!

```{python}

rintro_data = pd.read_csv('/home/jovyan/code/MGTA 495/QUARTO_WEBSITE/data/rintro-chapter13conjoint.csv')

rintro_data.head()

```

The rintro dataset includes the following columns:

`resp.id`: Identifier for each respondent.

`ques`: Identifier for each choice task completed by a respondent.

`alt`: Identifier for each alternative presented within a choice task.

`carpool`: Whether the minivan is suited for carpooling (not one of the attributes mentioned but present in the dataset).

`seat`: Number of seats in the minivan (6, 7, 8).

`cargo`: Cargo space in the minivan (2ft, 3ft).

`eng`: Engine type of the minivan (gas, hybrid, electric).

`price`: Price of the minivan in thousands of dollars.

`choice`: Indicates whether the alternative was chosen (1) or not (0) in the choice task.

**Analysis of the Dataset Structure:**

1. **Number of Respondents**: We can determine the number of unique respondents in the survey by counting unique `resp.id`.

2. **Number of Choice Tasks per Respondent**: By analyzing the `ques` identifier within each `resp.id`, we can ascertain how many choice tasks each respondent completed.

3. **Number of Alternatives per Choice Task**: The `alt` column shows how many alternatives were presented to each respondent in each choice task.

4. **Attributes and Levels**:
   - **Seats**: 6, 7, 8
   - **Cargo Space**: 2ft, 3ft
   - **Engine Type**: gas, hybrid, electric
   - **Price**: Listed in thousands of dollars.

Let's calculate the specific counts for respondents, tasks, and alternatives. 

```{python}
# Calculate the number of unique respondents
num_respondents = rintro_data['resp.id'].nunique()

# Calculate the number of choice tasks per respondent
tasks_per_respondent = rintro_data.groupby('resp.id')['ques'].nunique()

# Calculate the number of alternatives per choice task
alternatives_per_task = rintro_data.groupby(['resp.id', 'ques'])['alt'].nunique()

num_respondents, tasks_per_respondent.describe(), alternatives_per_task.describe()

```

Here's a summary of the dataset based on the provided data:

1. **Number of Respondents**: There are 200 unique respondents who took part in the conjoint survey.

2. **Number of Choice Tasks per Respondent**: Each respondent completed 15 choice tasks. This number is consistent across all respondents.

3. **Number of Alternatives per Choice Task**: Each choice task presented 3 alternatives to the respondents, consistent across all tasks and respondents.

**Attributes and Levels in Each Alternative:**

- **Number of Seats**: 6, 7, 8
- **Cargo Space**: 2ft, 3ft
- **Engine Type**: Gas, Hybrid, Electric
- **Price**: Values are given in thousands of dollars (variable across alternatives).


This structure enables us to analyze how different attributes and their levels influence the choice preferences of respondents in the context of minivan preferences.


### Model

To estimate the Multinomial Logit (MNL) model for the minivan preferences, we'll include attributes by omitting specific levels to prevent multicollinearity. Specifically, we'll exclude the following baseline levels:

- 6 seats
- 2ft cargo
- Gas engine

We'll also include price as a continuous variable. For this task, instead of coding the log-likelihood function from scratch, we will use a function from a statistical package which will simplify the model estimation and provide robust standard errors for the coefficients.  

```{python}
import statsmodels.api as sm
import statsmodels.formula.api as smf

# Create dummy variables for the levels, excluding the baseline levels
rintro_data['seat_7'] = (rintro_data['seat'] == 7).astype(int)
rintro_data['seat_8'] = (rintro_data['seat'] == 8).astype(int)
rintro_data['cargo_3ft'] = (rintro_data['cargo'] == '3ft').astype(int)
rintro_data['eng_hyb'] = (rintro_data['eng'] == 'hyb').astype(int)
rintro_data['eng_elec'] = (rintro_data['eng'] == 'elec').astype(int)

# Define the model using a formula that includes the necessary dummy variables and price
formula = 'choice ~ seat_7 + seat_8 + cargo_3ft + eng_hyb + eng_elec + price'

# Fit the multinomial logit model
model = smf.glm(formula=formula, data=rintro_data, family=sm.families.Binomial())
result = model.fit()

# Display the results
result.summary()

```

Above are the estimated coefficients and their standard errors from the Multinomial Logit (MNL) model for the minivan preferences

**Interpretation of the Coefficients:**

- **Intercept**: Represents the log-odds of choosing a minivan with the baseline attributes (6 seats, 2ft cargo, gas engine).

- **Seat 7**: Having 7 seats instead of the baseline 6 seats reduces the log-odds of choice.

- **Seat 8**: Similar to 7 seats, having 8 seats also reduces the preference compared to 6 seats, though not as strongly as 7 seats.

- **Cargo 3ft**: More cargo space (3ft) increases the likelihood of a minivan being chosen over the baseline 2ft.

- **Engine Hybrid and Electric**: Both hybrid and electric engines are less preferred compared to the baseline gas engine, with electric being the least preferred among the three.

- **Price**: A higher price decreases the likelihood of the minivan being chosen, with each additional thousand dollars reducing the log-odds of choice significantly.


These results can help understand consumer preferences regarding minivan attributes and guide strategic decisions about product offerings and pricing.

### Results

Based on the estimated coefficients from the Multinomial Logit (MNL) model, here's a summary of consumer preferences for minivan features:

- **Seats**: Consumers prefer minivans with 6 seats over those with 7 or 8 seats, as indicated by the negative coefficients for 7 and 8 seats.

- **Cargo Space**: Larger cargo space (3ft) is more preferred compared to the baseline 2ft, as shown by the positive coefficient.

- **Engine Type**: The gas engine is more preferred than both hybrid and electric engines, which have negative coefficients, with the electric engine being the least preferred.

- **Price**: Lower prices are preferred, as the negative coefficient for price indicates that an increase in price reduces the likelihood of a minivan being chosen.

In summary, consumers show a preference for minivans with 6 seats, more cargo space, gas engines, and lower prices. These insights can inform marketing strategies and product development in the automotive industry.

What is the dollar value of 3ft of cargo space as compared to 2ft of cargo space, if using the price coefficient as a dollar-per-util conversion factor? 

To calculate the dollar value of the additional utility provided by having 3ft of cargo space compared to 2ft, we use the price coefficient as a dollar-per-util conversion factor. The formula to convert the utility difference into dollars is:

$$
\text{Dollar Value} = (\text{Coefficient of Feature}) \times \left( \frac{1}{-\text{Coefficient of Price}} \right)
$$

Where:

- **Coefficient of Feature** for 3ft cargo space is 0.4385.
- **Coefficient of Price** is -0.1591.


```{python}
# Extracting the coefficients for cargo space and price
coef_cargo_3ft = 0.4385
coef_price = -0.1591

# Calculate the dollar value of 3ft of cargo space compared to 2ft
dollar_value_cargo = coef_cargo_3ft * (1 / coef_price)
dollar_value_cargo

```

The dollar value of having 3ft of cargo space compared to 2ft of cargo space is approximately $2.76. This indicates that the utility benefit provided by the additional cargo space is equivalent to a reduction of about $2.76 in the price of the minivan.

What if we assume that the market consists of the following 6 minivans. How to predict the market shares of each minivan in the market?

| Minivan | Seats | Cargo | Engine | Price |
|---------|-------|-------|--------|-------|
| A       | 7     | 2     | Hyb    | 30    |
| B       | 6     | 2     | Gas    | 30    |
| C       | 8     | 2     | Gas    | 30    |
| D       | 7     | 3     | Gas    | 40    |
| E       | 6     | 2     | Elec   | 40    |
| F       | 7     | 2     | Hyb    | 35    |

To predict the market shares of each minivan, we will use the coefficients estimated from the Multinomial Logit (MNL) model and calculate the choice probabilities for each minivan configuration. The probabilities can be computed using the formula based on the logit model:

$$
\mathbb{P}(y = k) = \frac{e^{U_k}}{\sum_{j=1}^{J} e^{U_j}}
$$

Where $U_k$ is the utility of minivan $k$, and $J$ is the total number of alternatives (minivans in this case).

Let's define the utility for each minivan based on the attributes and the coefficients from the model:

- **Utility $U$**:

$$
U = \beta_0 + \beta_{seat7} \times \text{Seat7} + \beta_{seat8} \times \text{Seat8} + \beta_{cargo3ft} \times \text{Cargo3ft} + \beta_e
$$

We will substitute the attributes of each minivan into this utility formula, compute the exponentials, and then calculate the probabilities.


```{python}
# Create a DataFrame for the minivans with their attributes
minivans = pd.DataFrame({
    'Minivan': ['A', 'B', 'C', 'D', 'E', 'F'],
    'Seats': [7, 6, 8, 7, 6, 7],
    'Cargo': [2, 2, 2, 3, 2, 2],
    'Engine': ['Hyb', 'Gas', 'Gas', 'Gas', 'Elec', 'Hyb'],
    'Price': [30, 30, 30, 40, 40, 35]
})

# Map the attributes to model features
minivans['seat_7'] = (minivans['Seats'] == 7).astype(int)
minivans['seat_8'] = (minivans['Seats'] == 8).astype(int)
minivans['cargo_3ft'] = (minivans['Cargo'] == 3).astype(int)
minivans['eng_hyb'] = (minivans['Engine'] == 'Hyb').astype(int)
minivans['eng_elec'] = (minivans['Engine'] == 'Elec').astype(int)

# Use the estimated coefficients to calculate utilities
minivans['Utility'] = (result.params['Intercept'] + 
                       result.params['seat_7'] * minivans['seat_7'] +
                       result.params['seat_8'] * minivans['seat_8'] +
                       result.params['cargo_3ft'] * minivans['cargo_3ft'] +
                       result.params['eng_hyb'] * minivans['eng_hyb'] +
                       result.params['eng_elec'] * minivans['eng_elec'] +
                       result.params['price'] * minivans['Price'])

# Calculate exponential of utilities for the logit formula
minivans['Exp_Utility'] = np.exp(minivans['Utility'])

# Calculate choice probabilities
minivans['Probability'] = minivans['Exp_Utility'] / minivans['Exp_Utility'].sum()

# Display the predicted market shares
minivans[['Minivan', 'Probability']]

```

Here are the predicted market shares for each of the minivans in the market, based on the attributes given and the coefficients from the Multinomial Logit (MNL) model:

- **Minivan A (7 seats, 2ft cargo, Hybrid, $30k)**: 11.61%
- **Minivan B (6 seats, 2ft cargo, Gas, $30k)**: 41.97%
- **Minivan C (8 seats, 2ft cargo, Gas, $30k)**: 31.31%
- **Minivan D (7 seats, 3ft cargo, Gas, $40k)**: 7.84%
- **Minivan E (6 seats, 2ft cargo, Electric, $40k)**: 2.04%
- **Minivan F (7 seats, 2ft cargo, Hybrid, $35k)**: 5.24%

**Interpretation:**

- **Minivan B**, with the baseline attributes of 6 seats and a gas engine at a price of $30k, is the most preferred, capturing approximately 42% of the market.

- **Minivan C**, also with a gas engine but 8 seats at the same price, follows with about 31% of the market share, indicating a strong preference for gas engines and cost-effectiveness.

- **Minivan A and F**, both hybrids, show less preference, particularly as the price increases for Minivan F.

- **Minivan D**, despite having more cargo space, is less favored possibly due to its higher price.

- **Minivan E**, with an electric engine and the highest price, is the least preferred among the options.

These insights can help manufacturers understand consumer preferences and market dynamics, particularly the impact of seating configurations, engine types, and price on consumer choices.