[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thomas website",
    "section": "",
    "text": "Welcome to my website!\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Thomas’s resume",
    "section": "",
    "text": "Download PDF file.\nAbout this site"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "Homework1 - A Replication of Karlan and List (2007)\n\n\n\n\n\n\nThomas Chiang\n\n\nApr 16, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/project1/index.html",
    "href": "projects/project1/index.html",
    "title": "My main project",
    "section": "",
    "text": "I like….\n\n\nI also…."
  },
  {
    "objectID": "projects/project1/index.html#sub-header",
    "href": "projects/project1/index.html#sub-header",
    "title": "My main project",
    "section": "",
    "text": "I also…."
  },
  {
    "objectID": "hw1_questions.html",
    "href": "hw1_questions.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nto do: expand on the description of the experiment.\nThis project seeks to replicate their results."
  },
  {
    "objectID": "hw1_questions.html#introduction",
    "href": "hw1_questions.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nto do: expand on the description of the experiment.\nThis project seeks to replicate their results."
  },
  {
    "objectID": "hw1_questions.html#data",
    "href": "hw1_questions.html#data",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\nDescription\n\nimport pandas as pd\n\ndf = pd.read_stata('/home/jovyan/code/MGTA 495/QUARTO_WEBSITE/data/karlan_list_2007.dta')\n\ndata_description = df.describe().loc[['mean', 'std']]\n\nprint(data_description)\n\nprint(df.info())\n\n      treatment   control    ratio2    ratio3    size25    size50   size100  \\\nmean   0.666813  0.333187  0.222311  0.222211  0.166723  0.166623  0.166723   \nstd    0.471357  0.471357  0.415803  0.415736  0.372732  0.372643  0.372732   \n\n        sizeno     askd1     askd2  ...    redcty   bluecty    pwhite  \\\nmean  0.166743  0.222311  0.222291  ...  0.510245  0.488715  0.819599   \nstd   0.372750  0.415803  0.415790  ...  0.499900  0.499878  0.168560   \n\n        pblack  page18_39  ave_hh_sz  median_hhincome    powner  psch_atlstba  \\\nmean  0.086710   0.321694   2.429012     54815.700533  0.669418      0.391661   \nstd   0.135868   0.103039   0.378105     22027.316665  0.193405      0.186599   \n\n      pop_propurban  \nmean       0.871968  \nstd        0.258633  \n\n[2 rows x 48 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50083 entries, 0 to 50082\nData columns (total 51 columns):\n #   Column              Non-Null Count  Dtype   \n---  ------              --------------  -----   \n 0   treatment           50083 non-null  int8    \n 1   control             50083 non-null  int8    \n 2   ratio               50083 non-null  category\n 3   ratio2              50083 non-null  int8    \n 4   ratio3              50083 non-null  int8    \n 5   size                50083 non-null  category\n 6   size25              50083 non-null  int8    \n 7   size50              50083 non-null  int8    \n 8   size100             50083 non-null  int8    \n 9   sizeno              50083 non-null  int8    \n 10  ask                 50083 non-null  category\n 11  askd1               50083 non-null  int8    \n 12  askd2               50083 non-null  int8    \n 13  askd3               50083 non-null  int8    \n 14  ask1                50083 non-null  int16   \n 15  ask2                50083 non-null  int16   \n 16  ask3                50083 non-null  int16   \n 17  amount              50083 non-null  float32 \n 18  gave                50083 non-null  int8    \n 19  amountchange        50083 non-null  float32 \n 20  hpa                 50083 non-null  float32 \n 21  ltmedmra            50083 non-null  int8    \n 22  freq                50083 non-null  int16   \n 23  years               50082 non-null  float64 \n 24  year5               50083 non-null  int8    \n 25  mrm2                50082 non-null  float64 \n 26  dormant             50083 non-null  int8    \n 27  female              48972 non-null  float64 \n 28  couple              48935 non-null  float64 \n 29  state50one          50083 non-null  int8    \n 30  nonlit              49631 non-null  float64 \n 31  cases               49631 non-null  float64 \n 32  statecnt            50083 non-null  float32 \n 33  stateresponse       50083 non-null  float32 \n 34  stateresponset      50083 non-null  float32 \n 35  stateresponsec      50080 non-null  float32 \n 36  stateresponsetminc  50080 non-null  float32 \n 37  perbush             50048 non-null  float32 \n 38  close25             50048 non-null  float64 \n 39  red0                50048 non-null  float64 \n 40  blue0               50048 non-null  float64 \n 41  redcty              49978 non-null  float64 \n 42  bluecty             49978 non-null  float64 \n 43  pwhite              48217 non-null  float32 \n 44  pblack              48047 non-null  float32 \n 45  page18_39           48217 non-null  float32 \n 46  ave_hh_sz           48221 non-null  float32 \n 47  median_hhincome     48209 non-null  float64 \n 48  powner              48214 non-null  float32 \n 49  psch_atlstba        48215 non-null  float32 \n 50  pop_propurban       48217 non-null  float32 \ndtypes: category(3), float32(16), float64(12), int16(4), int8(16)\nmemory usage: 8.9 MB\nNone\n\n\n\nThere are 50,083 observations in the dataset.\nThe treatment column indicates whether the observation was part of the treatment group (1) or the control group (0), with a majority being in the treatment group.\nThe ratio column categorizes the match ratio, with ‘Control’ being the most frequent category, followed by ‘2’, ‘1’, and ‘3’, indicating different matching ratios for donations.\nThe size column indicates the match threshold, where ‘Control’ is the most common, implying many observations did not have a stated match threshold, followed by different threshold levels like $25,000, $100,000, and $50,000.\nThe ask column suggests donation amounts with ‘Control’ indicating no suggestion, and the rest being multiples of the highest previous contribution.\nThe amount column represents the dollars given, with an average donation of around $0.92, a maximum donation of $400, and a standard deviation indicating variability in donation amounts.\nThe gave column is a binary indicator of whether any donation was given, with a low overall mean, indicating a low response rate.\nDemographic variables such as pwhite, pblack, page18_39, ave_hh_sz, median_hhincome, powner, psch_atlstba, and pop_propurban give us information about the racial composition, age distribution, household size, income levels, homeownership, educational attainment, and urban population proportion within the zip codes of the donors.\nPolitical orientation is captured with variables like perbush (state vote share for Bush), red0 (red state), and blue0 (blue state), allowing for an analysis of donations based on political leanings.\nFor the categorical variables, we have the counts for each category in the treatment, ratio, size, and ask columns, giving us a sense of how the treatments were distributed across the sample.\n\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\n\nBalance Test\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\n\nfrom scipy import stats\nimport statsmodels.api as sm\n\n# Defining the treatment and control groups for the variable 'mrm2' (months since last donation)\ntreatment_mrm2 = df[df['treatment'] == 1]['mrm2']\ncontrol_mrm2 = df[df['treatment'] == 0]['mrm2']\n\n# Performing a t-test between treatment and control groups\nt_test_result = stats.ttest_ind(treatment_mrm2, control_mrm2, equal_var=False, nan_policy='omit')\n\n# Performing a linear regression of mrm2 on treatment\n# Adding a constant to the model for the intercept\nX = sm.add_constant(df['treatment'])\ny = df['mrm2']\nlinear_regression_result = sm.OLS(y, X, missing='drop').fit()\n\n# Extracting the coefficient for the treatment variable from the regression results\ntreatment_coefficient = linear_regression_result.params['treatment']\n\n# The p-value for the treatment coefficient in the regression should match the p-value from the t-test\nregression_p_value = linear_regression_result.pvalues['treatment']\n\nprint(t_test_result)\n\nprint('treatment_coefficient=',treatment_coefficient) \nprint('regression_p_value=',regression_p_value)\n\nTtestResult(statistic=0.11953155228177251, pvalue=0.9048549631450832, df=33394.47581389535)\ntreatment_coefficient= 0.013685851546783642\nregression_p_value= 0.9048859731777756\n\n\n\nT-Test: The t-test shows that the difference in the average months since the last donation between the treatment and control groups is not statistically significant at the 95% confidence level. The test statistic is approximately 0.12, and the p-value is 0.905, indicating that we fail to reject the null hypothesis that there is no difference in means between the two groups.\nLinear Regression: When we perform a linear regression of ‘mrm2’ on the treatment variable, the estimated coefficient for the treatment variable is approximately 0.014. The p-value for this coefficient is 0.905, which matches the p-value from the t-test, confirming that there is no statistically significant difference at the 95% confidence level.\n\nBoth methods, the t-test and the linear regression, yield the same conclusion, demonstrating the balance between the treatment and control groups regarding the months since the last donation. This is consistent with what we would expect if the randomization process was successful. The lack of significant differences in pre-treatment characteristics like ‘mrm2’ supports the validity of the experiment’s design, as shown in Table 1 of the paper, which likely serves to demonstrate that randomization created equivalent groups and that the treatment effect can be attributed to the treatment itself rather than pre-existing differences."
  },
  {
    "objectID": "hw1_questions.html#experimental-results",
    "href": "hw1_questions.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\nCharitable Contribution Made\nFirst, I analyze whether matched donations lead to an increased response rate of making a donation.\n\nimport matplotlib.pyplot as plt\n\n# Calculating the proportion of people who donated in both treatment and control groups\nproportion_treatment_donated = df[df['treatment'] == 1]['gave'].mean()\nproportion_control_donated = df[df['treatment'] == 0]['gave'].mean()\n\n# Data to plot\nproportions = [proportion_control_donated, proportion_treatment_donated]\ngroup_labels = ['Control', 'Treatment']\n\n# Creating the bar plot\nplt.figure(figsize=(10, 6))\n\nlabels = ['Treatment', 'Control']\nbars = plt.bar(labels, proportions, color=['orange', 'blue'])\n\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2%}', ha='center', va='bottom')\nplt.ylabel('Proportion Who Donated')\nplt.title('Proportion of People Who Made a Charitable Contribution')\nplt.ylim(0, max(proportions) + 0.05)  # Set y-axis limit to add some space above the highest bar\nplt.show()\n\n\n\n\n\n\n\n\nEach bar is the proportion of people who donated. One bar for treatment and one bar for control.\nAs observed, the bar for the treatment group is slightly higher than that for the control group, suggesting a higher donation response rate in the treatment group.\n\n# Performing a t-test on the binary outcome of whether any charitable donation was made ('gave' column)\ntreatment_gave = df[df['treatment'] == 1]['gave']\ncontrol_gave = df[df['treatment'] == 0]['gave']\n\n# T-test\nt_test_gave = stats.ttest_ind(treatment_gave, control_gave, equal_var=False)\n\n# Bivariate Linear Regression for the same binary outcome\nX_gave = sm.add_constant(df['treatment'])\ny_gave = df['gave']\nlinear_regression_gave = sm.OLS(y_gave, X_gave, missing='drop').fit()\n\n# Results from the linear regression\nregression_results_gave = linear_regression_gave.summary()\n\nt_test_gave, regression_results_gave.tables[1]\n\nprint(regression_results_gave)\n\nprint(t_test_gave)\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                  0.000\nMethod:                 Least Squares   F-statistic:                     9.618\nDate:                Tue, 16 Apr 2024   Prob (F-statistic):            0.00193\nTime:                        05:20:41   Log-Likelihood:                 26630.\nNo. Observations:               50083   AIC:                        -5.326e+04\nDf Residuals:                   50081   BIC:                        -5.324e+04\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          0.0179      0.001     16.225      0.000       0.016       0.020\ntreatment      0.0042      0.001      3.101      0.002       0.002       0.007\n==============================================================================\nOmnibus:                    59814.280   Durbin-Watson:                   2.005\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          4317152.727\nSkew:                           6.740   Prob(JB):                         0.00\nKurtosis:                      46.440   Cond. No.                         3.23\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nTtestResult(statistic=3.2094621908279835, pvalue=0.001330982345091417, df=36576.84238986656)\n\n\nThe t-test between the treatment and control groups for the binary outcome of whether any charitable donation was made shows a statistically significant difference. The test statistic is approximately 3.21 and the p-value is 0.0013, which is below the 0.05 threshold typically used for statistical significance. This implies that the treatment had a significant effect on the likelihood of making a donation compared to the control group.\nThe bivariate linear regression that regresses the binary outcome of giving on the treatment indicator also demonstrates this finding. The coefficient associated with the treatment variable in the regression will indicate the average effect of the treatment on the probability of giving.\nIn the context of the experiment, the significant p-value and the positive test statistic suggest that the matched donations (treatment) lead to an increased likelihood of making a donation. Interpreting these results in terms of human behavior, we can infer that individuals are more likely to contribute to a charitable cause when their donation is being matched by another party. This could be due to a perceived increase in the value of their donation, or it may trigger a sense of social participation or responsibility.\nThe statistical results align with Table 2a Panel A from the paper, confirming the robustness of the experiment’s findings and providing evidence that matched donations can indeed influence donation behavior.\n\n# Running a probit regression where the outcome variable is 'gave' and the explanatory variable is 'treatment'\nprobit_model = sm.Probit(y_gave, X_gave).fit()\n\n# Displaying the results of the probit regression\nprobit_results = probit_model.summary()\n\n# Specifically, we're interested in the coefficient of 'treatment' variable and its p-value to compare with Table 3, column 1\nprobit_coefficient = probit_model.params['treatment']\nprobit_p_value = probit_model.pvalues['treatment']\n\nprint(probit_results.tables[1])\nprint('probit_coefficient=',probit_coefficient)\nprint('probit_p_value=',probit_p_value)\n\nOptimization terminated successfully.\n         Current function value: 0.100443\n         Iterations 7\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         -2.1001      0.023    -90.073      0.000      -2.146      -2.054\ntreatment      0.0868      0.028      3.113      0.002       0.032       0.141\n==============================================================================\nprobit_coefficient= 0.08678462244745852\nprobit_p_value= 0.001852399014778513\n\n\nProbit regression\nThe coefficient and the level of significance for the treatment effect in our regression match exactly with the results presented in the paper. This suggests that our model has successfully replicated the finding in Table 3, column 1 of the paper, confirming that the treatment (receiving a matching offer) has a positive and significant effect on the likelihood of making a donation.\nFor a thorough replication, including the control column is not necessary because the treatment variable captures the effect of being in the treatment group compared to the control group. The control group is inherently part of the baseline against which the treatment effect is measured. Therefore, the model is correctly specified by including only the treatment variable to match the results presented in Table 3, column 1 of the paper.\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate.\n\ndf['ratio_1'] = (df['ratio'] == 1).astype(int)\ndf['ratio_2'] = (df['ratio2'] == 1).astype(int)\ndf['ratio_3'] = (df['ratio3'] == 1).astype(int)\n\nratio_1 = df[df['ratio_1'] == 1]\nratio_2 = df[df['ratio_2'] == 1]\nratio_3 = df[df['ratio_3'] == 1]\n# 1:1 vs 2:1\nt_test_1_vs_2 = stats.ttest_ind(ratio_1['gave'], ratio_2['gave']\n, equal_var=False)\n\n# 1:1 vs 3:1\nt_test_1_vs_3 = stats.ttest_ind(ratio_1['gave'], ratio_3['gave'], equal_var=False)\n\n# 2:1 vs 3:1\nt_test_2_vs_3 = stats.ttest_ind(ratio_2['gave'], ratio_3['gave'], equal_var=False)\n\nt_test_1_vs_2, t_test_1_vs_3, t_test_2_vs_3\n\n(TtestResult(statistic=-0.965048975142932, pvalue=0.33453078237183076, df=22225.07770983836),\n TtestResult(statistic=-1.0150174470156275, pvalue=0.31010856527625774, df=22215.0529778684),\n TtestResult(statistic=-0.05011581369764474, pvalue=0.9600305476940865, df=22260.84918918778))\n\n\n\n1:1 vs 2:1 and 1:1 vs 3:1: The p-values are greater than the common significance level (0.05), indicating no significant difference in the likelihood of donating between the 1:1 match ratio and either the 2:1 or 3:1 match ratios.\n2:1 vs 3:1: Similarly, the p-value is much greater than 0.05, showing no statistically significant difference between these two higher match ratios.\n\nThese results suggest that increasing the match ratio from 1:1 to 2:1 or 3:1 does not significantly increase the probability that someone donates, aligning with the authors’ observations that larger match ratios do not have additional impact over a 1:1 match in motivating donations.\n\n# Logistic regression: regressing 'gave' on 'ratio2' and 'ratio3'\nX = df[['ratio_1','ratio_2', 'ratio_3']]  # Independent variables\nX = sm.add_constant(X)  # Adding a constant for the intercept\ny = df['gave']  # Dependent variable\n\n# Fit the logistic regression model\nmodel = sm.Logit(y, X).fit()\n\n# Summary of the model\nmodel.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.100430\n         Iterations 8\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\ngave\nNo. Observations:\n50083\n\n\nModel:\nLogit\nDf Residuals:\n50079\n\n\nMethod:\nMLE\nDf Model:\n3\n\n\nDate:\nTue, 16 Apr 2024\nPseudo R-squ.:\n0.001108\n\n\nTime:\n05:20:42\nLog-Likelihood:\n-5029.8\n\n\nconverged:\nTrue\nLL-Null:\n-5035.4\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n0.01091\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n-4.0073\n0.058\n-68.556\n0.000\n-4.122\n-3.893\n\n\nratio_1\n0.1530\n0.089\n1.728\n0.084\n-0.021\n0.327\n\n\nratio_2\n0.2418\n0.086\n2.797\n0.005\n0.072\n0.411\n\n\nratio_3\n0.2463\n0.086\n2.852\n0.004\n0.077\n0.416\n\n\n\n\n\nModel Coefficients:\nIntercept: The baseline log odds of giving when none of the specific match ratios are applied is -4.0073.\n\nratio_1 Coefficient: The change in log odds of giving for a 1:1 match ratio over the baseline (constant) is 0.1530. This effect is not statistically significant (p-value = 0.084), suggesting that the 1:1 match ratio does not significantly differ from the baseline when controlling for other ratios.\nratio_2 Coefficient: The log odds of giving for a 2:1 match ratio is higher by 0.2418 compared to the baseline (no match). This is statistically significant (p-value = 0.005).\nratio_3 Coefficient: The log odds of giving for a 3:1 match ratio increase by 0.2463 compared to the baseline, also statistically significant (p-value = 0.004).\n\nInterpretation:\nThe coefficients for both ratio_2 and ratio_3 indicate a positive and statistically significant effect on the likelihood of making a donation compared to when no specific match ratio is applied (baseline). This aligns with the notion that higher match ratios (2:1 and 3:1) increase the likelihood of donating more than no specific match condition or possibly the control condition.\nThe model’s pseudo R-squared is still very low, indicating that although the match ratio is statistically significant, its overall explanatory power on the likelihood of donating is quite limited.\nThis model effectively addresses the question by assessing the impact of different match ratios using regression analysis and clarifies how each ratio compares to a baseline scenario where no specific match condition is mentioned.\nThe code below calculate the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios.\n\nimport numpy as np\n\n# Direct Calculation from Data\nresponse_rate_1 = df[df['ratio_1'] == 1]['gave'].mean()\nresponse_rate_2 = df[df['ratio_2'] == 1]['gave'].mean()\nresponse_rate_3 = df[df['ratio_3'] == 1]['gave'].mean()\n\ndiff_1_to_2_data = response_rate_2 - response_rate_1\ndiff_2_to_3_data = response_rate_3 - response_rate_2\n\n# Convert differences in log odds to differences in probability\ncoef_ratio_1 = 0.1530\ncoef_ratio_2 = 0.2418\ncoef_ratio_3 = 0.2463\n\n# Convert log-odds to odds\nodds_ratio_1 = np.exp(coef_ratio_1)\nodds_ratio_2 = np.exp(coef_ratio_2)\nodds_ratio_3 = np.exp(coef_ratio_3)\n\n# Convert odds to probabilities\nprob_ratio_1 = odds_ratio_1 / (1 + odds_ratio_1)\nprob_ratio_2 = odds_ratio_2 / (1 + odds_ratio_2)\nprob_ratio_3 = odds_ratio_3 / (1 + odds_ratio_3)\n\n# Compute differences in probabilities\ndiff_prob_1_to_2 = prob_ratio_2 - prob_ratio_1\ndiff_prob_2_to_3 = prob_ratio_3 - prob_ratio_2\n\n\nprint('Response Rate for 1:1 Match =',response_rate_1) \nprint('Response Rate for 2:1 Match =',response_rate_2)\nprint('Response Rate for 3:1 Match =',response_rate_3)\nprint('Difference in Response Rate from 1:1 to 2:1 =',diff_1_to_2_data)\nprint('Difference in Response Rate from 2:1 to 3:1 =',diff_2_to_3_data)\nprint('Difference in Probability from 1:1 to 2:1 =',diff_prob_1_to_2)\nprint('Difference in Probability from 2:1 to 3:1 =',diff_prob_2_to_3)\n\nResponse Rate for 1:1 Match = 0.020749124225276205\nResponse Rate for 2:1 Match = 0.0226333752469912\nResponse Rate for 3:1 Match = 0.022733399227244138\nDifference in Response Rate from 1:1 to 2:1 = 0.0018842510217149944\nDifference in Response Rate from 2:1 to 3:1 = 0.00010002398025293902\nDifference in Probability from 1:1 to 2:1 = 0.02198162510978996\nDifference in Probability from 2:1 to 3:1 = 0.0011084130839175144\n\n\nDirect Data Analysis:\n\nThere is a small increase in response rate when moving from a 1:1 to a 2:1 match ratio (0.19%), indicating a slight effectiveness in increasing donations.\nThe increase from a 2:1 to a 3:1 match ratio is very minimal (0.01%), suggesting diminishing returns or nearly no additional benefit from increasing the match ratio beyond 2:1.\n\nRegression Analysis:\n\nThe regression model shows a significant relative increase (2.20%) in the probability of donating when moving from a 1:1 to a 2:1 match ratio, indicating a notable impact on donation likelihood.\nThe increase from 2:1 to 3:1 in probability (0.11%) is small, aligning with the direct data analysis that suggests minimal additional benefit from moving to even higher match ratios.\n\nThese findings suggest that while increasing the match ratio from 1:1 to 2:1 does increase the likelihood of donations, the incremental benefit of further increasing the ratio to 3:1 is very limited. This could help organizations optimize their matching strategies, potentially favoring a 2:1 ratio over higher ratios which do not appear to significantly boost donation rates beyond that point.\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\nThe code below is to calculate a t-test and run a bivariate linear regression of the donation amount on the treatment status.\n\n# Define the control group (where 'control' column is 1)\ncontrol_group_amount = df[df['control'] == 1]['amount']\n\n# Define the treatment group (where 'treatment' column is 1)\ntreatment_group_amount = df[df['treatment'] == 1]['amount']\n\n# Perform t-test between control and treatment groups\nt_test_result = stats.ttest_ind(control_group_amount, treatment_group_amount, equal_var=False)\n\n# Run a bivariate linear regression of donation amount on treatment status\nX_treat = sm.add_constant(df['treatment'])  # Treatment status with constant\ny_amount = df['amount']  # Donation amount\n\n# Fit the linear regression model\nlinear_model = sm.OLS(y_amount, X_treat).fit()\n\n# Display results from t-test and linear regression\nlinear_model.summary(), t_test_result\n\n(&lt;class 'statsmodels.iolib.summary.Summary'&gt;\n \"\"\"\n                             OLS Regression Results                            \n ==============================================================================\n Dep. Variable:                 amount   R-squared:                       0.000\n Model:                            OLS   Adj. R-squared:                  0.000\n Method:                 Least Squares   F-statistic:                     3.461\n Date:                Tue, 16 Apr 2024   Prob (F-statistic):             0.0628\n Time:                        05:20:42   Log-Likelihood:            -1.7946e+05\n No. Observations:               50083   AIC:                         3.589e+05\n Df Residuals:                   50081   BIC:                         3.589e+05\n Df Model:                           1                                         \n Covariance Type:            nonrobust                                         \n ==============================================================================\n                  coef    std err          t      P&gt;|t|      [0.025      0.975]\n ------------------------------------------------------------------------------\n const          0.8133      0.067     12.063      0.000       0.681       0.945\n treatment      0.1536      0.083      1.861      0.063      -0.008       0.315\n ==============================================================================\n Omnibus:                    96861.113   Durbin-Watson:                   2.008\n Prob(Omnibus):                  0.000   Jarque-Bera (JB):        240735713.635\n Skew:                          15.297   Prob(JB):                         0.00\n Kurtosis:                     341.269   Cond. No.                         3.23\n ==============================================================================\n \n Notes:\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n \"\"\",\n TtestResult(statistic=-1.9182618934467577, pvalue=0.055085665289183336, df=36216.05660774625))\n\n\n\nThe results suggest that there is a potential increase in the amount donated when individuals are in the treatment group (receiving some form of matched donation offer) compared to the control group (not receiving a matched donation offer), but this increase is not definitively proven with these tests.\nThe statistical significance is marginal, and the effect size is small, meaning that while the treatment might influence the amount given, the effect is not large.\nThis analysis is beneficial as it provides an initial understanding of the relationship between match offers and donation behavior. Further analysis might involve looking at the specific sizes of match ratios to identify which are most effective.\n\nWhat if we limit the data to just people who made a donation and repeat the previous analysis?\n\n# To limit the data to just people who made a donation, we filter the DataFrame\ndf_donors = df[df['amount'] &gt; 0]\n\n# Perform the t-test between control and treatment groups for donors only\ncontrol_group_donors = df_donors[df_donors['control'] == 1]['amount']\ntreatment_group_donors = df_donors[df_donors['treatment'] == 1]['amount']\nt_test_donors_result = stats.ttest_ind(control_group_donors, treatment_group_donors, equal_var=False)\n\n# Run a bivariate linear regression of donation amount on treatment status for donors only\nX_donors = sm.add_constant(df_donors['treatment'])  # Treatment status with constant\ny_donors_amount = df_donors['amount']  # Donation amount\n\n# Fit the linear regression model for donors\nlinear_model_donors = sm.OLS(y_donors_amount, X_donors).fit()\n\n# Display results from t-test and linear regression for donors\nlinear_model_donors.summary(),t_test_donors_result\n\n(&lt;class 'statsmodels.iolib.summary.Summary'&gt;\n \"\"\"\n                             OLS Regression Results                            \n ==============================================================================\n Dep. Variable:                 amount   R-squared:                       0.000\n Model:                            OLS   Adj. R-squared:                 -0.001\n Method:                 Least Squares   F-statistic:                    0.3374\n Date:                Tue, 16 Apr 2024   Prob (F-statistic):              0.561\n Time:                        05:20:42   Log-Likelihood:                -5326.8\n No. Observations:                1034   AIC:                         1.066e+04\n Df Residuals:                    1032   BIC:                         1.067e+04\n Df Model:                           1                                         \n Covariance Type:            nonrobust                                         \n ==============================================================================\n                  coef    std err          t      P&gt;|t|      [0.025      0.975]\n ------------------------------------------------------------------------------\n const         45.5403      2.423     18.792      0.000      40.785      50.296\n treatment     -1.6684      2.872     -0.581      0.561      -7.305       3.968\n ==============================================================================\n Omnibus:                      587.258   Durbin-Watson:                   2.031\n Prob(Omnibus):                  0.000   Jarque-Bera (JB):             5623.279\n Skew:                           2.464   Prob(JB):                         0.00\n Kurtosis:                      13.307   Cond. No.                         3.49\n ==============================================================================\n \n Notes:\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n \"\"\",\n TtestResult(statistic=0.5846089794983359, pvalue=0.5590471865673547, df=557.4599304243758))\n\n\nThe negative coefficient for the treatment could suggest that the treatment (receiving some form of matched donation offer) does not necessarily lead to larger donations among those who chose to donate.\n\nimport matplotlib.pyplot as plt\n\n# Histogram for the treatment group\nplt.figure(figsize=(14, 6))\n\n# Treatment histogram\nplt.subplot(1, 2, 1)\nplt.hist(treatment_group_donors, bins=30, color='blue', alpha=0.7)\nplt.axvline(treatment_group_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Treatment Group Donation Amounts')\nplt.xlabel('Donation Amount')\nplt.ylabel('Frequency')\nplt.grid(axis='y', alpha=0.75)\nplt.text(treatment_group_donors.mean() * 1.1, plt.ylim()[1] * 0.9, f'Average: ${treatment_group_donors.mean():.2f}',\n         color='red')\n\n# Control histogram\nplt.subplot(1, 2, 2)\nplt.hist(control_group_donors, bins=30, color='green', alpha=0.7)\nplt.axvline(control_group_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Control Group Donation Amounts')\nplt.xlabel('Donation Amount')\nplt.ylabel('Frequency')\nplt.grid(axis='y', alpha=0.75)\nplt.text(control_group_donors.mean() * 1.1, plt.ylim()[1] * 0.9, f'Average: ${control_group_donors.mean():.2f}',\n         color='red')\n\n# Show the plots\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe histogram on the left represents the treatment group, with a sample average donation amount indicated by a red dashed line.\nThe histogram on the right shows the control group, also with the sample average marked by a red dashed line.\n\nIn both histograms, most of the donations are clustered at the lower end of the scale, with fewer large donations. This is a common pattern in charitable giving, where many small donations are accompanied by a smaller number of larger gifts."
  },
  {
    "objectID": "hw1_questions.html#simulation-experiment",
    "href": "hw1_questions.html#simulation-experiment",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiment",
    "text": "Simulation Experiment\nAs a reminder of how the t-statistic “works,” in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made.\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.\n\nLaw of Large Numbers\nto do: Make a plot like those on slide 43 from our first class and explain the plot to the reader. To do this, you will simulate 100,00 draws from the control distribution and 10,000 draws from the treatment distribution. You’ll then calculate a vector of 10,000 differences, and then you’ll plot the cumulative average of that vector of differences. Comment on whether the cumulative average approaches the true difference in means.\n\n# Importing the necessary libraries for simulation\nfrom scipy.stats import bernoulli\n\n# Setting the probabilities for control and treatment groups\np_control = 0.018\np_treatment = 0.022\n\n# Simulating 100,000 draws from the control distribution\ncontrol_sim = bernoulli.rvs(p_control, size=100000)\n\n# Simulating 10,000 draws from the treatment distribution\ntreatment_sim = bernoulli.rvs(p_treatment, size=10000)\n\n# Calculate the vector of 10,000 differences\n# For each of the first 10,000 elements in the control group,\n# we calculate the difference to the corresponding (by index) element in the treatment group.\n# We then calculate the cumulative average of these differences.\ndifferences = treatment_sim[:10000] - control_sim[:10000]\ncumulative_average = np.cumsum(differences) / np.arange(1, 10001)\n\n# Plotting the cumulative average of differences\nplt.figure(figsize=(10, 5))\nplt.plot(cumulative_average, color='red')\nplt.xlabel('Number of Simulations')\nplt.ylabel('Cumulative Average of Difference')\nplt.title('Cumulative Average Difference Between Treatment and Control')\nplt.axhline((p_treatment - p_control), color='blue', linestyle='dashed', linewidth=1)\nplt.text(10000, (p_treatment - p_control), f'True Difference: {p_treatment - p_control:.4f}', color='blue', ha='right')\nplt.show()\n\n\n\n\n\n\n\n\nThe plot shows the cumulative average difference between the treatment and control groups over 10,000 simulations. As the number of simulations increases, the cumulative average difference begins to stabilize and approaches the true difference in probabilities (0.004, shown by the blue dashed line).\nInitially, there’s considerable volatility because the cumulative average can be greatly affected by a small number of draws. However, as we accumulate more samples, each additional sample has a smaller impact on the cumulative average, which starts to converge towards the true difference between the probabilities of making a donation in the treatment and control groups.\nThis illustrates the Law of Large Numbers in action: as the sample size grows, the sample average becomes a more accurate estimate of the population parameter. The plot confirms that the cumulative average approaches the true difference, validating that the simulation behaves as expected according to the law.\nFrom this, we learn that even with random fluctuations in data (as seen in the earlier part of the graph), given enough data points, our estimates will get closer to the true underlying parameters we’re trying to measure. This reinforces the value of large sample sizes in statistical analysis for achieving reliable estimates\n\n\nCentral Limit Theorem\nto do: Make 4 histograms like those on slide 44 from our first class at sample sizes 50, 200, 500, and 1000 and explain these plots to the reader. To do this for a sample size of e.g. 50, take 50 draws from each of the control and treatment distributions, and calculate the average difference between those draws. Then repeat that process 999 more times so that you have 1000 averages. Plot the histogram of those averages. Comment on whether zero is in the “middle” of the distribution or whether it’s in the “tail.”"
  },
  {
    "objectID": "projects/project1/hw1_questions.html",
    "href": "projects/project1/hw1_questions.html",
    "title": "Homework1 - A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nBy randomly assigning one of these three treatments to each of the 50,000 letters, Karlan and List could observe the differences in response rates and donation amounts that resulted from the different types of letters. This randomization is key to the experiment because it helps ensure that any differences in outcomes are due to the type of letter received and not some other factor.\nThe goal of the experiment was not just to see if people would give, but whether they would give more or less depending on the type of appeal made in the letter. It’s a study of how messaging and perceived incentives can affect charitable giving.\nThe goal of this project is to replicate their results, using the available data to see if we can achieve the same findings, thus reinforcing the conclusions drawn from the original study."
  },
  {
    "objectID": "projects/project1/hw1_questions.html#introduction",
    "href": "projects/project1/hw1_questions.html#introduction",
    "title": "Homework1 - A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nBy randomly assigning one of these three treatments to each of the 50,000 letters, Karlan and List could observe the differences in response rates and donation amounts that resulted from the different types of letters. This randomization is key to the experiment because it helps ensure that any differences in outcomes are due to the type of letter received and not some other factor.\nThe goal of the experiment was not just to see if people would give, but whether they would give more or less depending on the type of appeal made in the letter. It’s a study of how messaging and perceived incentives can affect charitable giving.\nThe goal of this project is to replicate their results, using the available data to see if we can achieve the same findings, thus reinforcing the conclusions drawn from the original study."
  },
  {
    "objectID": "projects/project1/hw1_questions.html#data",
    "href": "projects/project1/hw1_questions.html#data",
    "title": "Homework1 - A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\nDescription\n\nimport pandas as pd\n\ndf = pd.read_stata('/home/jovyan/code/MGTA 495/QUARTO_WEBSITE/data/karlan_list_2007.dta')\n\ndata_description = df.describe().loc[['mean', 'std']]\n\nprint(data_description)\n\nprint(df.info())\n\n      treatment   control    ratio2    ratio3    size25    size50   size100  \\\nmean   0.666813  0.333187  0.222311  0.222211  0.166723  0.166623  0.166723   \nstd    0.471357  0.471357  0.415803  0.415736  0.372732  0.372643  0.372732   \n\n        sizeno     askd1     askd2  ...    redcty   bluecty    pwhite  \\\nmean  0.166743  0.222311  0.222291  ...  0.510245  0.488715  0.819599   \nstd   0.372750  0.415803  0.415790  ...  0.499900  0.499878  0.168560   \n\n        pblack  page18_39  ave_hh_sz  median_hhincome    powner  psch_atlstba  \\\nmean  0.086710   0.321694   2.429012     54815.700533  0.669418      0.391661   \nstd   0.135868   0.103039   0.378105     22027.316665  0.193405      0.186599   \n\n      pop_propurban  \nmean       0.871968  \nstd        0.258633  \n\n[2 rows x 48 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 50083 entries, 0 to 50082\nData columns (total 51 columns):\n #   Column              Non-Null Count  Dtype   \n---  ------              --------------  -----   \n 0   treatment           50083 non-null  int8    \n 1   control             50083 non-null  int8    \n 2   ratio               50083 non-null  category\n 3   ratio2              50083 non-null  int8    \n 4   ratio3              50083 non-null  int8    \n 5   size                50083 non-null  category\n 6   size25              50083 non-null  int8    \n 7   size50              50083 non-null  int8    \n 8   size100             50083 non-null  int8    \n 9   sizeno              50083 non-null  int8    \n 10  ask                 50083 non-null  category\n 11  askd1               50083 non-null  int8    \n 12  askd2               50083 non-null  int8    \n 13  askd3               50083 non-null  int8    \n 14  ask1                50083 non-null  int16   \n 15  ask2                50083 non-null  int16   \n 16  ask3                50083 non-null  int16   \n 17  amount              50083 non-null  float32 \n 18  gave                50083 non-null  int8    \n 19  amountchange        50083 non-null  float32 \n 20  hpa                 50083 non-null  float32 \n 21  ltmedmra            50083 non-null  int8    \n 22  freq                50083 non-null  int16   \n 23  years               50082 non-null  float64 \n 24  year5               50083 non-null  int8    \n 25  mrm2                50082 non-null  float64 \n 26  dormant             50083 non-null  int8    \n 27  female              48972 non-null  float64 \n 28  couple              48935 non-null  float64 \n 29  state50one          50083 non-null  int8    \n 30  nonlit              49631 non-null  float64 \n 31  cases               49631 non-null  float64 \n 32  statecnt            50083 non-null  float32 \n 33  stateresponse       50083 non-null  float32 \n 34  stateresponset      50083 non-null  float32 \n 35  stateresponsec      50080 non-null  float32 \n 36  stateresponsetminc  50080 non-null  float32 \n 37  perbush             50048 non-null  float32 \n 38  close25             50048 non-null  float64 \n 39  red0                50048 non-null  float64 \n 40  blue0               50048 non-null  float64 \n 41  redcty              49978 non-null  float64 \n 42  bluecty             49978 non-null  float64 \n 43  pwhite              48217 non-null  float32 \n 44  pblack              48047 non-null  float32 \n 45  page18_39           48217 non-null  float32 \n 46  ave_hh_sz           48221 non-null  float32 \n 47  median_hhincome     48209 non-null  float64 \n 48  powner              48214 non-null  float32 \n 49  psch_atlstba        48215 non-null  float32 \n 50  pop_propurban       48217 non-null  float32 \ndtypes: category(3), float32(16), float64(12), int16(4), int8(16)\nmemory usage: 8.9 MB\nNone\n\n\n\nThere are 50,083 observations in the dataset.\nThe treatment column indicates whether the observation was part of the treatment group (1) or the control group (0), with a majority being in the treatment group.\nThe ratio column categorizes the match ratio, with ‘Control’ being the most frequent category, followed by ‘2’, ‘1’, and ‘3’, indicating different matching ratios for donations.\nThe size column indicates the match threshold, where ‘Control’ is the most common, implying many observations did not have a stated match threshold, followed by different threshold levels like $25,000, $100,000, and $50,000.\nThe ask column suggests donation amounts with ‘Control’ indicating no suggestion, and the rest being multiples of the highest previous contribution.\nThe amount column represents the dollars given, with an average donation of around $0.92, a maximum donation of $400, and a standard deviation indicating variability in donation amounts.\nThe gave column is a binary indicator of whether any donation was given, with a low overall mean, indicating a low response rate.\nDemographic variables such as pwhite, pblack, page18_39, ave_hh_sz, median_hhincome, powner, psch_atlstba, and pop_propurban give us information about the racial composition, age distribution, household size, income levels, homeownership, educational attainment, and urban population proportion within the zip codes of the donors.\nPolitical orientation is captured with variables like perbush (state vote share for Bush), red0 (red state), and blue0 (blue state), allowing for an analysis of donations based on political leanings.\nFor the categorical variables, we have the counts for each category in the treatment, ratio, size, and ask columns, giving us a sense of how the treatments were distributed across the sample.\n\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\n\nBalance Test\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\n\nfrom scipy import stats\nimport statsmodels.api as sm\n\n# Defining the treatment and control groups for the variable 'mrm2' (months since last donation)\ntreatment_mrm2 = df[df['treatment'] == 1]['mrm2']\ncontrol_mrm2 = df[df['treatment'] == 0]['mrm2']\n\n# Performing a t-test between treatment and control groups\nt_test_result = stats.ttest_ind(treatment_mrm2, control_mrm2, equal_var=False, nan_policy='omit')\n\nX = sm.add_constant(df['treatment'])\ny = df['mrm2']\nlinear_regression_result = sm.OLS(y, X, missing='drop').fit()\n\n# Extracting the coefficient for the treatment variable from the regression results\ntreatment_coefficient = linear_regression_result.params['treatment']\n\n# The p-value for the treatment coefficient in the regression should match the p-value from the t-test\nregression_p_value = linear_regression_result.pvalues['treatment']\n\nprint(t_test_result)\n\nprint('treatment_coefficient=',treatment_coefficient) \nprint('regression_p_value=',regression_p_value)\n\nTtestResult(statistic=0.11953155228177251, pvalue=0.9048549631450832, df=33394.47581389535)\ntreatment_coefficient= 0.013685851546783642\nregression_p_value= 0.9048859731777756\n\n\n\nT-Test: The t-test shows that the difference in the average months since the last donation between the treatment and control groups is not statistically significant at the 95% confidence level. The test statistic is approximately 0.12, and the p-value is 0.905, indicating that we fail to reject the null hypothesis that there is no difference in means between the two groups.\nLinear Regression: When we perform a linear regression of ‘mrm2’ on the treatment variable, the estimated coefficient for the treatment variable is approximately 0.014. The p-value for this coefficient is 0.905, which matches the p-value from the t-test, confirming that there is no statistically significant difference at the 95% confidence level.\n\nBoth methods, the t-test and the linear regression, yield the same conclusion, demonstrating the balance between the treatment and control groups regarding the months since the last donation. This is consistent with what we would expect if the randomization process was successful. The lack of significant differences in pre-treatment characteristics like ‘mrm2’ supports the validity of the experiment’s design, as shown in Table 1 of the paper, which likely serves to demonstrate that randomization created equivalent groups and that the treatment effect can be attributed to the treatment itself rather than pre-existing differences."
  },
  {
    "objectID": "projects/project1/hw1_questions.html#experimental-results",
    "href": "projects/project1/hw1_questions.html#experimental-results",
    "title": "Homework1 - A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\nCharitable Contribution Made\nFirst, I analyze whether matched donations lead to an increased response rate of making a donation.\n\nimport matplotlib.pyplot as plt\n\n# Calculating the proportion of people who donated in both treatment and control groups\nproportion_treatment_donated = df[df['treatment'] == 1]['gave'].mean()\nproportion_control_donated = df[df['treatment'] == 0]['gave'].mean()\n\n# Data to plot\nproportions = [proportion_control_donated, proportion_treatment_donated]\ngroup_labels = ['Control', 'Treatment']\n\n# Creating the bar plot\nplt.figure(figsize=(10, 6))\n\nlabels = ['Treatment', 'Control']\nbars = plt.bar(labels, proportions, color=['orange', 'blue'], edgecolor= ['black'])\n\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2%}', ha='center', va='bottom')\nplt.ylabel('Proportion Who Donated')\nplt.title('Proportion of People Who Made a Charitable Contribution')\nplt.ylim(0, max(proportions) + 0.05)  # Set y-axis limit to add some space above the highest bar\nplt.show()\n\n\n\n\n\n\n\n\nEach bar is the proportion of people who donated. One bar for treatment and one bar for control.\nAs observed, the bar for the treatment group is slightly higher than that for the control group, suggesting a higher donation response rate in the treatment group.\n\n# Performing a t-test on the binary outcome of whether any charitable donation was made ('gave' column)\ntreatment_gave = df[df['treatment'] == 1]['gave']\ncontrol_gave = df[df['treatment'] == 0]['gave']\n\n# T-test\nt_test_gave = stats.ttest_ind(treatment_gave, control_gave, equal_var=False)\n\n# Bivariate Linear Regression for the same binary outcome\nX_gave = sm.add_constant(df['treatment'])\ny_gave = df['gave']\nlinear_regression_gave = sm.OLS(y_gave, X_gave, missing='drop').fit()\n\n# Results from the linear regression\nregression_results_gave = linear_regression_gave.summary()\n\nt_test_gave, regression_results_gave.tables[1]\n\nprint(regression_results_gave)\n\nprint(t_test_gave)\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   gave   R-squared:                       0.000\nModel:                            OLS   Adj. R-squared:                  0.000\nMethod:                 Least Squares   F-statistic:                     9.618\nDate:                Tue, 16 Apr 2024   Prob (F-statistic):            0.00193\nTime:                        16:12:21   Log-Likelihood:                 26630.\nNo. Observations:               50083   AIC:                        -5.326e+04\nDf Residuals:                   50081   BIC:                        -5.324e+04\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          0.0179      0.001     16.225      0.000       0.016       0.020\ntreatment      0.0042      0.001      3.101      0.002       0.002       0.007\n==============================================================================\nOmnibus:                    59814.280   Durbin-Watson:                   2.005\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          4317152.727\nSkew:                           6.740   Prob(JB):                         0.00\nKurtosis:                      46.440   Cond. No.                         3.23\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nTtestResult(statistic=3.2094621908279835, pvalue=0.001330982345091417, df=36576.84238986656)\n\n\nThe t-test between the treatment and control groups for the binary outcome of whether any charitable donation was made shows a statistically significant difference. The test statistic is approximately 3.21 and the p-value is 0.0013, which is below the 0.05 threshold typically used for statistical significance. This implies that the treatment had a significant effect on the likelihood of making a donation compared to the control group.\nThe bivariate linear regression that regresses the binary outcome of giving on the treatment indicator also demonstrates this finding. The coefficient associated with the treatment variable in the regression will indicate the average effect of the treatment on the probability of giving.\nIn the context of the experiment, the significant p-value and the positive test statistic suggest that the matched donations (treatment) lead to an increased likelihood of making a donation. Interpreting these results in terms of human behavior, we can infer that individuals are more likely to contribute to a charitable cause when their donation is being matched by another party. This could be due to a perceived increase in the value of their donation, or it may trigger a sense of social participation or responsibility.\nThe statistical results align with Table 2a Panel A from the paper, confirming the robustness of the experiment’s findings and providing evidence that matched donations can indeed influence donation behavior.\n\n# Running a probit regression where the outcome variable is 'gave' and the explanatory variable is 'treatment'\nprobit_model = sm.Probit(y_gave, X_gave).fit()\n\nprobit_results = probit_model.summary()\n\nprobit_coefficient = probit_model.params['treatment']\nprobit_p_value = probit_model.pvalues['treatment']\n\nprint(probit_results.tables[1])\nprint('probit_coefficient=',probit_coefficient)\nprint('probit_p_value=',probit_p_value)\n\nOptimization terminated successfully.\n         Current function value: 0.100443\n         Iterations 7\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         -2.1001      0.023    -90.073      0.000      -2.146      -2.054\ntreatment      0.0868      0.028      3.113      0.002       0.032       0.141\n==============================================================================\nprobit_coefficient= 0.08678462244745852\nprobit_p_value= 0.001852399014778513\n\n\nProbit regression\nThe coefficient and the level of significance for the treatment effect in our regression match exactly with the results presented in the paper. This suggests that our model has successfully replicated the finding in Table 3, column 1 of the paper, confirming that the treatment (receiving a matching offer) has a positive and significant effect on the likelihood of making a donation.\nFor a thorough replication, including the control column is not necessary because the treatment variable captures the effect of being in the treatment group compared to the control group. The control group is inherently part of the baseline against which the treatment effect is measured. Therefore, the model is correctly specified by including only the treatment variable to match the results presented in Table 3, column 1 of the paper.\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate.\n\ndf['ratio_1'] = (df['ratio'] == 1).astype(int)\ndf['ratio_2'] = (df['ratio2'] == 1).astype(int)\ndf['ratio_3'] = (df['ratio3'] == 1).astype(int)\n\nratio_1 = df[df['ratio_1'] == 1]\nratio_2 = df[df['ratio_2'] == 1]\nratio_3 = df[df['ratio_3'] == 1]\n\n# 1:1 vs 2:1\nt_test_1_vs_2 = stats.ttest_ind(ratio_1['gave'], ratio_2['gave']\n, equal_var=False)\n\n# 1:1 vs 3:1\nt_test_1_vs_3 = stats.ttest_ind(ratio_1['gave'], ratio_3['gave'], equal_var=False)\n\n# 2:1 vs 3:1\nt_test_2_vs_3 = stats.ttest_ind(ratio_2['gave'], ratio_3['gave'], equal_var=False)\n\nt_test_1_vs_2, t_test_1_vs_3, t_test_2_vs_3\n\n(TtestResult(statistic=-0.965048975142932, pvalue=0.33453078237183076, df=22225.07770983836),\n TtestResult(statistic=-1.0150174470156275, pvalue=0.31010856527625774, df=22215.0529778684),\n TtestResult(statistic=-0.05011581369764474, pvalue=0.9600305476940865, df=22260.84918918778))\n\n\n\n1:1 vs 2:1 and 1:1 vs 3:1: The p-values are greater than the common significance level (0.05), indicating no significant difference in the likelihood of donating between the 1:1 match ratio and either the 2:1 or 3:1 match ratios.\n2:1 vs 3:1: Similarly, the p-value is much greater than 0.05, showing no statistically significant difference between these two higher match ratios.\n\nThese results suggest that increasing the match ratio from 1:1 to 2:1 or 3:1 does not significantly increase the probability that someone donates, aligning with the authors’ observations that larger match ratios do not have additional impact over a 1:1 match in motivating donations.\n\n# Logistic regression: regressing 'gave' on 'ratio2' and 'ratio3'\nX = df[['ratio_1','ratio_2', 'ratio_3']]  # Independent variables\nX = sm.add_constant(X)  # Adding a constant for the intercept\ny = df['gave']  # Dependent variable\n\n# Fit the logistic regression model\nmodel = sm.Logit(y, X).fit()\n\nmodel.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.100430\n         Iterations 8\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\ngave\nNo. Observations:\n50083\n\n\nModel:\nLogit\nDf Residuals:\n50079\n\n\nMethod:\nMLE\nDf Model:\n3\n\n\nDate:\nTue, 16 Apr 2024\nPseudo R-squ.:\n0.001108\n\n\nTime:\n16:12:22\nLog-Likelihood:\n-5029.8\n\n\nconverged:\nTrue\nLL-Null:\n-5035.4\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n0.01091\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n-4.0073\n0.058\n-68.556\n0.000\n-4.122\n-3.893\n\n\nratio_1\n0.1530\n0.089\n1.728\n0.084\n-0.021\n0.327\n\n\nratio_2\n0.2418\n0.086\n2.797\n0.005\n0.072\n0.411\n\n\nratio_3\n0.2463\n0.086\n2.852\n0.004\n0.077\n0.416\n\n\n\n\n\nModel Coefficients:\nIntercept: The baseline log odds of giving when none of the specific match ratios are applied is -4.0073.\n\nratio_1 Coefficient: The change in log odds of giving for a 1:1 match ratio over the baseline (constant) is 0.1530. This effect is not statistically significant (p-value = 0.084), suggesting that the 1:1 match ratio does not significantly differ from the baseline when controlling for other ratios.\nratio_2 Coefficient: The log odds of giving for a 2:1 match ratio is higher by 0.2418 compared to the baseline (no match). This is statistically significant (p-value = 0.005).\nratio_3 Coefficient: The log odds of giving for a 3:1 match ratio increase by 0.2463 compared to the baseline, also statistically significant (p-value = 0.004).\n\nInterpretation:\nThe coefficients for both ratio_2 and ratio_3 indicate a positive and statistically significant effect on the likelihood of making a donation compared to when no specific match ratio is applied (baseline). This aligns with the notion that higher match ratios (2:1 and 3:1) increase the likelihood of donating more than no specific match condition or possibly the control condition.\nThe model’s pseudo R-squared is still very low, indicating that although the match ratio is statistically significant, its overall explanatory power on the likelihood of donating is quite limited.\nThis model effectively addresses the question by assessing the impact of different match ratios using regression analysis and clarifies how each ratio compares to a baseline scenario where no specific match condition is mentioned.\nThe code below calculate the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios.\n\nimport numpy as np\n\n# Direct Calculation from Data\nresponse_rate_1 = df[df['ratio_1'] == 1]['gave'].mean()\nresponse_rate_2 = df[df['ratio_2'] == 1]['gave'].mean()\nresponse_rate_3 = df[df['ratio_3'] == 1]['gave'].mean()\n\ndiff_1_to_2_data = response_rate_2 - response_rate_1\ndiff_2_to_3_data = response_rate_3 - response_rate_2\n\n# Convert differences in log odds to differences in probability\ncoef_ratio_1 = 0.1530\ncoef_ratio_2 = 0.2418\ncoef_ratio_3 = 0.2463\n\n# Convert log-odds to odds\nodds_ratio_1 = np.exp(coef_ratio_1)\nodds_ratio_2 = np.exp(coef_ratio_2)\nodds_ratio_3 = np.exp(coef_ratio_3)\n\n# Convert odds to probabilities\nprob_ratio_1 = odds_ratio_1 / (1 + odds_ratio_1)\nprob_ratio_2 = odds_ratio_2 / (1 + odds_ratio_2)\nprob_ratio_3 = odds_ratio_3 / (1 + odds_ratio_3)\n\n# Compute differences in probabilities\ndiff_prob_1_to_2 = prob_ratio_2 - prob_ratio_1\ndiff_prob_2_to_3 = prob_ratio_3 - prob_ratio_2\n\n\nprint('Response Rate for 1:1 Match =',response_rate_1) \nprint('Response Rate for 2:1 Match =',response_rate_2)\nprint('Response Rate for 3:1 Match =',response_rate_3)\nprint('Difference in Response Rate from 1:1 to 2:1 =',diff_1_to_2_data)\nprint('Difference in Response Rate from 2:1 to 3:1 =',diff_2_to_3_data)\nprint('Difference in Probability from 1:1 to 2:1 =',diff_prob_1_to_2)\nprint('Difference in Probability from 2:1 to 3:1 =',diff_prob_2_to_3)\n\nResponse Rate for 1:1 Match = 0.020749124225276205\nResponse Rate for 2:1 Match = 0.0226333752469912\nResponse Rate for 3:1 Match = 0.022733399227244138\nDifference in Response Rate from 1:1 to 2:1 = 0.0018842510217149944\nDifference in Response Rate from 2:1 to 3:1 = 0.00010002398025293902\nDifference in Probability from 1:1 to 2:1 = 0.02198162510978996\nDifference in Probability from 2:1 to 3:1 = 0.0011084130839175144\n\n\nDirect Data Analysis:\n\nThere is a small increase in response rate when moving from a 1:1 to a 2:1 match ratio (0.19%), indicating a slight effectiveness in increasing donations.\nThe increase from a 2:1 to a 3:1 match ratio is very minimal (0.01%), suggesting diminishing returns or nearly no additional benefit from increasing the match ratio beyond 2:1.\n\nRegression Analysis:\n\nThe regression model shows a significant relative increase (2.20%) in the probability of donating when moving from a 1:1 to a 2:1 match ratio, indicating a notable impact on donation likelihood.\nThe increase from 2:1 to 3:1 in probability (0.11%) is small, aligning with the direct data analysis that suggests minimal additional benefit from moving to even higher match ratios.\n\nThese findings suggest that while increasing the match ratio from 1:1 to 2:1 does increase the likelihood of donations, the incremental benefit of further increasing the ratio to 3:1 is very limited. This could help organizations optimize their matching strategies, potentially favoring a 2:1 ratio over higher ratios which do not appear to significantly boost donation rates beyond that point.\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\nThe code below is to calculate a t-test and run a bivariate linear regression of the donation amount on the treatment status.\n\n# Define the control group \ncontrol_group_amount = df[df['control'] == 1]['amount']\n\n# Define the treatment group \ntreatment_group_amount = df[df['treatment'] == 1]['amount']\n\n# Perform t-test between control and treatment groups\nt_test_result = stats.ttest_ind(control_group_amount, treatment_group_amount, equal_var=False)\n\n# Run a bivariate linear regression of donation amount on treatment status\nX_treat = sm.add_constant(df['treatment'])  # Treatment status with constant\ny_amount = df['amount']  # Donation amount\n\n# Fit the linear regression model\nlinear_model = sm.OLS(y_amount, X_treat).fit()\n\nlinear_model.summary(), t_test_result\n\n(&lt;class 'statsmodels.iolib.summary.Summary'&gt;\n \"\"\"\n                             OLS Regression Results                            \n ==============================================================================\n Dep. Variable:                 amount   R-squared:                       0.000\n Model:                            OLS   Adj. R-squared:                  0.000\n Method:                 Least Squares   F-statistic:                     3.461\n Date:                Tue, 16 Apr 2024   Prob (F-statistic):             0.0628\n Time:                        16:12:22   Log-Likelihood:            -1.7946e+05\n No. Observations:               50083   AIC:                         3.589e+05\n Df Residuals:                   50081   BIC:                         3.589e+05\n Df Model:                           1                                         \n Covariance Type:            nonrobust                                         \n ==============================================================================\n                  coef    std err          t      P&gt;|t|      [0.025      0.975]\n ------------------------------------------------------------------------------\n const          0.8133      0.067     12.063      0.000       0.681       0.945\n treatment      0.1536      0.083      1.861      0.063      -0.008       0.315\n ==============================================================================\n Omnibus:                    96861.113   Durbin-Watson:                   2.008\n Prob(Omnibus):                  0.000   Jarque-Bera (JB):        240735713.635\n Skew:                          15.297   Prob(JB):                         0.00\n Kurtosis:                     341.269   Cond. No.                         3.23\n ==============================================================================\n \n Notes:\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n \"\"\",\n TtestResult(statistic=-1.9182618934467577, pvalue=0.055085665289183336, df=36216.05660774625))\n\n\n\nThe results suggest that there is a potential increase in the amount donated when individuals are in the treatment group (receiving some form of matched donation offer) compared to the control group (not receiving a matched donation offer), but this increase is not definitively proven with these tests.\nThe statistical significance is marginal, and the effect size is small, meaning that while the treatment might influence the amount given, the effect is not large.\nThis analysis is beneficial as it provides an initial understanding of the relationship between match offers and donation behavior. Further analysis might involve looking at the specific sizes of match ratios to identify which are most effective.\n\nWhat if we limit the data to just people who made a donation and repeat the previous analysis?\n\n# To limit the data to just people who made a donation, we filter the DataFrame\ndf_donors = df[df['amount'] &gt; 0]\n\n# Perform the t-test between control and treatment groups for donors only\ncontrol_group_donors = df_donors[df_donors['control'] == 1]['amount']\ntreatment_group_donors = df_donors[df_donors['treatment'] == 1]['amount']\nt_test_donors_result = stats.ttest_ind(control_group_donors, treatment_group_donors, equal_var=False)\n\n# Run a bivariate linear regression of donation amount on treatment status for donors only\nX_donors = sm.add_constant(df_donors['treatment'])  # Treatment status with constant\ny_donors_amount = df_donors['amount']  # Donation amount\n\n# Fit the linear regression model for donors\nlinear_model_donors = sm.OLS(y_donors_amount, X_donors).fit()\n\nlinear_model_donors.summary(),t_test_donors_result\n\n(&lt;class 'statsmodels.iolib.summary.Summary'&gt;\n \"\"\"\n                             OLS Regression Results                            \n ==============================================================================\n Dep. Variable:                 amount   R-squared:                       0.000\n Model:                            OLS   Adj. R-squared:                 -0.001\n Method:                 Least Squares   F-statistic:                    0.3374\n Date:                Tue, 16 Apr 2024   Prob (F-statistic):              0.561\n Time:                        16:12:22   Log-Likelihood:                -5326.8\n No. Observations:                1034   AIC:                         1.066e+04\n Df Residuals:                    1032   BIC:                         1.067e+04\n Df Model:                           1                                         \n Covariance Type:            nonrobust                                         \n ==============================================================================\n                  coef    std err          t      P&gt;|t|      [0.025      0.975]\n ------------------------------------------------------------------------------\n const         45.5403      2.423     18.792      0.000      40.785      50.296\n treatment     -1.6684      2.872     -0.581      0.561      -7.305       3.968\n ==============================================================================\n Omnibus:                      587.258   Durbin-Watson:                   2.031\n Prob(Omnibus):                  0.000   Jarque-Bera (JB):             5623.279\n Skew:                           2.464   Prob(JB):                         0.00\n Kurtosis:                      13.307   Cond. No.                         3.49\n ==============================================================================\n \n Notes:\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n \"\"\",\n TtestResult(statistic=0.5846089794983359, pvalue=0.5590471865673547, df=557.4599304243758))\n\n\nThe negative coefficient for the treatment could suggest that the treatment (receiving some form of matched donation offer) does not necessarily lead to larger donations among those who chose to donate.\n\nimport matplotlib.pyplot as plt\n\n# Histogram for the treatment group\nplt.figure(figsize=(14, 6))\n\n# Treatment histogram\nplt.subplot(1, 2, 1)\nplt.hist(treatment_group_donors, bins=30, color='orange', alpha=0.7)\nplt.axvline(treatment_group_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Treatment Group Donation Amounts')\nplt.xlabel('Donation Amount')\nplt.ylabel('Frequency')\nplt.grid(axis='y', alpha=0.75)\nplt.text(treatment_group_donors.mean() * 1.1, plt.ylim()[1] * 0.9, f'Average: ${treatment_group_donors.mean():.2f}',\n         color='red')\n\n# Control histogram\nplt.subplot(1, 2, 2)\nplt.hist(control_group_donors, bins=30, color='skyblue', alpha=0.7)\nplt.axvline(control_group_donors.mean(), color='red', linestyle='dashed', linewidth=2)\nplt.title('Control Group Donation Amounts')\nplt.xlabel('Donation Amount')\nplt.ylabel('Frequency')\nplt.grid(axis='y', alpha=0.75)\nplt.text(control_group_donors.mean() * 1.1, plt.ylim()[1] * 0.9, f'Average: ${control_group_donors.mean():.2f}',\n         color='red')\n\n# Show the plots\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe histogram on the left represents the treatment group, with a sample average donation amount indicated by a red dashed line.\nThe histogram on the right shows the control group, also with the sample average marked by a red dashed line.\n\nIn both histograms, most of the donations are clustered at the lower end of the scale, with fewer large donations. This is a common pattern in charitable giving, where many small donations are accompanied by a smaller number of larger gifts."
  },
  {
    "objectID": "projects/project1/hw1_questions.html#simulation-experiment",
    "href": "projects/project1/hw1_questions.html#simulation-experiment",
    "title": "Homework1 - A Replication of Karlan and List (2007)",
    "section": "Simulation Experiment",
    "text": "Simulation Experiment\nAs a reminder of how the t-statistic “works,” in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made.\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.\n\nLaw of Large Numbers\nThe plot shows the cumulative average difference between the treatment and control groups over 10,000 simulations. As the number of simulations increases, the cumulative average difference begins to stabilize and approaches the true difference in probabilities (0.004, shown by the blue dashed line).\n\n# Importing the necessary libraries for simulation\nfrom scipy.stats import bernoulli\n\n# Setting the probabilities for control and treatment groups\np_control = 0.018\np_treatment = 0.022\n\nrandom_state = 12\n\n# Simulating 100,000 draws from the control distribution with a random state\ncontrol_sim = bernoulli.rvs(p_control, size=100000, random_state=random_state)\n\n# Simulating 10,000 draws from the treatment distribution with a random state\ntreatment_sim = bernoulli.rvs(p_treatment, size=10000, random_state=random_state)\n\n# Calculate the vector of 10,000 differences\n# For each of the first 10,000 elements in the control group,\n# we calculate the difference to the corresponding (by index) element in the treatment group.\n# We then calculate the cumulative average of these differences.\ndifferences = treatment_sim[:10000] - control_sim[:10000]\ncumulative_average = np.cumsum(differences) / np.arange(1, 10001)\n\n# Plotting the cumulative average of differences\nplt.figure(figsize=(10, 5))\nplt.plot(cumulative_average, color='red')\nplt.xlabel('Number of Simulations')\nplt.ylabel('Cumulative Average of Difference')\nplt.title('Cumulative Average Difference Between Treatment and Control')\nplt.axhline((p_treatment - p_control), color='blue', linestyle='dashed', linewidth=1)\nplt.text(10000, (p_treatment - p_control), f'True Difference: {p_treatment - p_control:.4f}', color='blue', ha='right')\nplt.show()\n\n\n\n\n\n\n\n\nThis illustrates the Law of Large Numbers in action: as the sample size grows, the sample average becomes a more accurate estimate of the population parameter. The plot confirms that the cumulative average approaches the true difference, validating that the simulation behaves as expected according to the law.\nFrom this, we learn that even with random fluctuations in data, given enough data points, our estimates will get closer to the true underlying parameters we’re trying to measure. This reinforces the value of large sample sizes in statistical analysis for achieving reliable estimates.\n\n\nCentral Limit Theorem\nThe histograms I generated represent the distribution of the average differences between the treatment and control groups for sample sizes of 50, 200, 500, and 1000. Each histogram is based on 1000 repetitions of taking samples and calculating their average difference.\n\ndef simulate_clt(control_prob, treatment_prob, sample_sizes, num_simulations=1000):\n    plt.figure(figsize=(14, 7))\n\n    for i, sample_size in enumerate(sample_sizes, 1):\n        # Simulate the differences in means\n        control_means = [bernoulli.rvs(control_prob, size=sample_size).mean() for _ in range(num_simulations)]\n        treatment_means = [bernoulli.rvs(treatment_prob, size=sample_size).mean() for _ in range(num_simulations)]\n        differences_means = np.array(treatment_means) - np.array(control_means)\n\n        # Calculate the true difference in means\n        true_diff = treatment_prob - control_prob\n\n        # Plot the histogram of the 1000 average differences\n        plt.subplot(2, 2, i)\n        plt.hist(differences_means, bins=30, color='grey', edgecolor='black')\n        plt.axvline(true_diff, color='red', linestyle='dashed', linewidth=2)\n        plt.axvline(np.mean(differences_means), color='blue', linestyle='dashed', linewidth=1)\n        plt.title(f'Sample Size {sample_size}')\n        plt.xlabel('Average Difference')\n        plt.ylabel('Frequency')\n        plt.grid(axis='y', alpha=0.75)\n\n        # Annotation for the true difference and the sample mean difference\n        plt.text(true_diff, plt.ylim()[1] * 0.9, f'True Diff: {true_diff:.4f}', color='red', ha='center')\n        plt.text(np.mean(differences_means), plt.ylim()[1] * 0.8, f'Sample Mean: {np.mean(differences_means):.4f}', color='blue', ha='center')\n\n    plt.tight_layout()\n    plt.show()\n\n# Sample sizes to simulate\nsample_sizes = [50, 200, 500, 1000]\n\n# Run the simulation and plot the histograms\nsimulate_clt(p_control, p_treatment, sample_sizes)\n\n\n\n\n\n\n\n\nInterpretation of the Histograms:\n\nSample Size 50:\n\nThe histogram shows a wide spread of the average differences, indicating high variability in the sample means.\nThe true difference (0.0040) is marked by the red dashed line, and the sample mean of the differences (blue dashed line) is close to this true difference, which shows that even at a small sample size, the average of the differences can be close to the true difference, but individual simulations may vary widely.\nZero is not in the middle of the distribution, indicating that the true difference between the control and treatment means is not zero and the effect of the treatment is consistently in one direction.\n\nSample Size 200, 500, and 1000:\n\nAs the sample size increases, the histograms become more narrow and peak closer to the true difference. This is a demonstration of the Central Limit Theorem, which states that the distribution of the sample mean will become approximately normal (bell-shaped) as the sample size increases, even if the underlying distribution is not normal.\nThe consistency of the sample mean with the true difference improves with larger sample sizes, reflecting reduced variability and increased precision in the estimate of the mean difference.\nZero moves further into the tail of the distribution as the sample size increases, confirming that it is not the center of the distribution and that there is a systematic difference between the treatment and control groups.\nThese histograms illustrate that as the sample size grows, the sampling distribution of the mean becomes more concentrated around the true mean difference, confirming the principles of the Central Limit Theorem. They also show that the treatment has a consistent effect on the probability of donation since zero is not in the center but rather in the tail of the distributions, particularly for larger sample sizes."
  }
]